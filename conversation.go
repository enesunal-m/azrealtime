package azrealtime

// ConversationItem represents an item in the conversation.
// Items can be messages, function calls, or function call responses.
type ConversationItem struct {
	ID        string        `json:"id,omitempty"`        // The unique ID of the item
	Type      string        `json:"type"`                // The type of the item ("message", "function_call", "function_call_output")
	Status    string        `json:"status,omitempty"`    // The status of the item ("completed", "incomplete", "failed")
	Role      string        `json:"role,omitempty"`      // The role associated with the item ("user", "assistant", "system")
	Content   []ContentPart `json:"content,omitempty"`   // The content of the item
	CallID    string        `json:"call_id,omitempty"`   // The ID of the function call (for function_call_output items)
	Name      string        `json:"name,omitempty"`      // The name of the function being called
	Arguments string        `json:"arguments,omitempty"` // The arguments of the function call (JSON string)
	Output    string        `json:"output,omitempty"`    // The output of the function call
}

// ContentPart represents a part of the content in a conversation item.
// Content can be text, audio, or other types.
type ContentPart struct {
	Type       string `json:"type"`                 // The content type ("text", "audio", "input_text", "input_audio")
	Text       string `json:"text,omitempty"`       // The text content
	Audio      string `json:"audio,omitempty"`      // Base64-encoded audio data
	Transcript string `json:"transcript,omitempty"` // The transcript of the audio
}

// ResponseObject represents a response from the assistant.
type ResponseObject struct {
	ID            string                 `json:"id"`                       // The unique ID of the response
	Object        string                 `json:"object"`                   // The object type, always "realtime.response"
	Status        string                 `json:"status"`                   // The status of the response ("in_progress", "completed", "cancelled", "failed", "incomplete")
	StatusDetails map[string]interface{} `json:"status_details,omitempty"` // Additional details about the status
	Output        []ConversationItem     `json:"output"`                   // The list of output items generated by the response
	Usage         *ResponseUsage         `json:"usage,omitempty"`          // Usage statistics for the response
	Metadata      map[string]interface{} `json:"metadata,omitempty"`       // Set of 16 key-value pairs for metadata
}

// ResponseUsage represents usage statistics for a response.
type ResponseUsage struct {
	TotalTokens        int                        `json:"total_tokens"`                   // Total number of tokens used
	InputTokens        int                        `json:"input_tokens"`                   // Number of input tokens used
	OutputTokens       int                        `json:"output_tokens"`                  // Number of output tokens used
	InputTokenDetails  *ResponseUsageInputTokens  `json:"input_token_details,omitempty"`  // Breakdown of input tokens
	OutputTokenDetails *ResponseUsageOutputTokens `json:"output_token_details,omitempty"` // Breakdown of output tokens
}

// ResponseUsageInputTokens provides a breakdown of input tokens.
type ResponseUsageInputTokens struct {
	CachedTokens int `json:"cached_tokens"` // Number of cached tokens used
	TextTokens   int `json:"text_tokens"`   // Number of text tokens used
	AudioTokens  int `json:"audio_tokens"`  // Number of audio tokens used
}

// ResponseUsageOutputTokens provides a breakdown of output tokens.
type ResponseUsageOutputTokens struct {
	TextTokens  int `json:"text_tokens"`  // Number of text tokens generated
	AudioTokens int `json:"audio_tokens"` // Number of audio tokens generated
}
